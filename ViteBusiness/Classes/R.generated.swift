//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = VitePodRawBundle(path: Bundle(for: R.Class.self).path(forResource: "ViteBusiness", ofType: "bundle")!)!
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 85 images.
  struct image {
    /// Image `aboutus_logo`.
    static let aboutus_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "aboutus_logo")
    /// Image `background_add_button_white`.
    static let background_add_button_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_add_button_white")
    /// Image `background_address_add_button_white`.
    static let background_address_add_button_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_address_add_button_white")
    /// Image `background_button_blue`.
    static let background_button_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_button_blue")
    /// Image `background_button_white`.
    static let background_button_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_button_white")
    /// Image `beifen`.
    static let beifen = Rswift.ImageResource(bundle: R.hostingBundle, name: "beifen")
    /// Image `btn_path_bg`.
    static let btn_path_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_path_bg")
    /// Image `dotted_line`.
    static let dotted_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "dotted_line")
    /// Image `empty`.
    static let empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "empty")
    /// Image `eth_cardBg`.
    static let eth_cardBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "eth_cardBg")
    /// Image `face_id`.
    static let face_id = Rswift.ImageResource(bundle: R.hostingBundle, name: "face_id")
    /// Image `fetch_gift_bg`.
    static let fetch_gift_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "fetch_gift_bg")
    /// Image `fetch_gift_icon`.
    static let fetch_gift_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "fetch_gift_icon")
    /// Image `fingerprint`.
    static let fingerprint = Rswift.ImageResource(bundle: R.hostingBundle, name: "fingerprint")
    /// Image `gasSlider`.
    static let gasSlider = Rswift.ImageResource(bundle: R.hostingBundle, name: "gasSlider")
    /// Image `gift`.
    static let gift = Rswift.ImageResource(bundle: R.hostingBundle, name: "gift")
    /// Image `icon_background`.
    static let icon_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_background")
    /// Image `icon_button_add`.
    static let icon_button_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_add")
    /// Image `icon_button_address_add`.
    static let icon_button_address_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_address_add")
    /// Image `icon_button_address_scan`.
    static let icon_button_address_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_address_scan")
    /// Image `icon_button_facebook`.
    static let icon_button_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_facebook")
    /// Image `icon_button_github`.
    static let icon_button_github = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_github")
    /// Image `icon_button_infor`.
    static let icon_button_infor = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_infor")
    /// Image `icon_button_light`.
    static let icon_button_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_light")
    /// Image `icon_button_medium`.
    static let icon_button_medium = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_medium")
    /// Image `icon_button_paste_blue`.
    static let icon_button_paste_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_paste_blue")
    /// Image `icon_button_paste_gray`.
    static let icon_button_paste_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_paste_gray")
    /// Image `icon_button_paste_light_gray`.
    static let icon_button_paste_light_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_paste_light_gray")
    /// Image `icon_button_paste_white`.
    static let icon_button_paste_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_paste_white")
    /// Image `icon_button_reddit`.
    static let icon_button_reddit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_reddit")
    /// Image `icon_button_telegram`.
    static let icon_button_telegram = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_telegram")
    /// Image `icon_button_twitter`.
    static let icon_button_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_twitter")
    /// Image `icon_button_wechat`.
    static let icon_button_wechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_wechat")
    /// Image `icon_button_youtube`.
    static let icon_button_youtube = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_button_youtube")
    /// Image `icon_cell_select`.
    static let icon_cell_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_select")
    /// Image `icon_cell_unselect`.
    static let icon_cell_unselect = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cell_unselect")
    /// Image `icon_contacts`.
    static let icon_contacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_contacts")
    /// Image `icon_logo`.
    static let icon_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_logo")
    /// Image `icon_mnemonic`.
    static let icon_mnemonic = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_mnemonic")
    /// Image `icon_nav_back_black`.
    static let icon_nav_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_back_black")
    /// Image `icon_nav_close_black`.
    static let icon_nav_close_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_close_black")
    /// Image `icon_nav_photo_black`.
    static let icon_nav_photo_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_photo_black")
    /// Image `icon_nav_qrcode_black`.
    static let icon_nav_qrcode_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_qrcode_black")
    /// Image `icon_nav_scan_black`.
    static let icon_nav_scan_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_scan_black")
    /// Image `icon_nav_share_black`.
    static let icon_nav_share_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_share_black")
    /// Image `icon_quota`.
    static let icon_quota = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_quota")
    /// Image `icon_receive_logo`.
    static let icon_receive_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_receive_logo")
    /// Image `icon_right_white`.
    static let icon_right_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_right_white")
    /// Image `icon_search`.
    static let icon_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search")
    /// Image `icon_setting`.
    static let icon_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_setting")
    /// Image `icon_tabbar_me_select`.
    static let icon_tabbar_me_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_me_select")
    /// Image `icon_tabbar_me`.
    static let icon_tabbar_me = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_me")
    /// Image `icon_tabbar_vote_select`.
    static let icon_tabbar_vote_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_vote_select")
    /// Image `icon_tabbar_vote`.
    static let icon_tabbar_vote = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_vote")
    /// Image `icon_tabbar_wallet_select`.
    static let icon_tabbar_wallet_select = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_wallet_select")
    /// Image `icon_tabbar_wallet`.
    static let icon_tabbar_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_wallet")
    /// Image `icon_token_vite_white`.
    static let icon_token_vite_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_token_vite_white")
    /// Image `icon_token_vite`.
    static let icon_token_vite = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_token_vite")
    /// Image `icon_tx_coin`.
    static let icon_tx_coin = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_coin")
    /// Image `icon_tx_pledge`.
    static let icon_tx_pledge = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_pledge")
    /// Image `icon_tx_register`.
    static let icon_tx_register = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_register")
    /// Image `icon_tx_reward`.
    static let icon_tx_reward = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_reward")
    /// Image `icon_tx_transfer`.
    static let icon_tx_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_transfer")
    /// Image `icon_tx_vote`.
    static let icon_tx_vote = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tx_vote")
    /// Image `icon_vite_logo`.
    static let icon_vite_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_vite_logo")
    /// Image `icon_vote_rank`.
    static let icon_vote_rank = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_vote_rank")
    /// Image `icon_voteaddress`.
    static let icon_voteaddress = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_voteaddress")
    /// Image `icon_votecount`.
    static let icon_votecount = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_votecount")
    /// Image `intro_icon_0`.
    static let intro_icon_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "intro_icon_0")
    /// Image `intro_icon_1`.
    static let intro_icon_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "intro_icon_1")
    /// Image `intro_icon_2`.
    static let intro_icon_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "intro_icon_2")
    /// Image `intro_icon_3`.
    static let intro_icon_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "intro_icon_3")
    /// Image `lock_page_user`.
    static let lock_page_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_page_user")
    /// Image `login_bg`.
    static let login_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_bg")
    /// Image `login_logo`.
    static let login_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_logo")
    /// Image `network_error`.
    static let network_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "network_error")
    /// Image `quota_bell`.
    static let quota_bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "quota_bell")
    /// Image `splash_slogen`.
    static let splash_slogen = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash_slogen")
    /// Image `success`.
    static let success = Rswift.ImageResource(bundle: R.hostingBundle, name: "success")
    /// Image `switch_mode_icon`.
    static let switch_mode_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch_mode_icon")
    /// Image `tabber_shadow`.
    static let tabber_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabber_shadow")
    /// Image `vite`.
    static let vite = Rswift.ImageResource(bundle: R.hostingBundle, name: "vite")
    /// Image `vote_info_bg`.
    static let vote_info_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "vote_info_bg")
    /// Image `vote_info_dot`.
    static let vote_info_dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "vote_info_dot")
    /// Image `vote_info_icon`.
    static let vote_info_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "vote_info_icon")
    
    /// `UIImage(named: "aboutus_logo", bundle: ..., traitCollection: ...)`
    static func aboutus_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutus_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background_add_button_white", bundle: ..., traitCollection: ...)`
    static func background_add_button_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_add_button_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background_address_add_button_white", bundle: ..., traitCollection: ...)`
    static func background_address_add_button_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_address_add_button_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background_button_blue", bundle: ..., traitCollection: ...)`
    static func background_button_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_button_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "background_button_white", bundle: ..., traitCollection: ...)`
    static func background_button_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_button_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "beifen", bundle: ..., traitCollection: ...)`
    static func beifen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.beifen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_path_bg", bundle: ..., traitCollection: ...)`
    static func btn_path_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_path_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dotted_line", bundle: ..., traitCollection: ...)`
    static func dotted_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dotted_line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "empty", bundle: ..., traitCollection: ...)`
    static func empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.empty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eth_cardBg", bundle: ..., traitCollection: ...)`
    static func eth_cardBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eth_cardBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "face_id", bundle: ..., traitCollection: ...)`
    static func face_id(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.face_id, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fetch_gift_bg", bundle: ..., traitCollection: ...)`
    static func fetch_gift_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fetch_gift_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fetch_gift_icon", bundle: ..., traitCollection: ...)`
    static func fetch_gift_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fetch_gift_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fingerprint", bundle: ..., traitCollection: ...)`
    static func fingerprint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fingerprint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gasSlider", bundle: ..., traitCollection: ...)`
    static func gasSlider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gasSlider, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gift", bundle: ..., traitCollection: ...)`
    static func gift(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gift, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_background", bundle: ..., traitCollection: ...)`
    static func icon_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_add", bundle: ..., traitCollection: ...)`
    static func icon_button_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_address_add", bundle: ..., traitCollection: ...)`
    static func icon_button_address_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_address_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_address_scan", bundle: ..., traitCollection: ...)`
    static func icon_button_address_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_address_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_facebook", bundle: ..., traitCollection: ...)`
    static func icon_button_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_github", bundle: ..., traitCollection: ...)`
    static func icon_button_github(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_github, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_infor", bundle: ..., traitCollection: ...)`
    static func icon_button_infor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_infor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_light", bundle: ..., traitCollection: ...)`
    static func icon_button_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_light, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_medium", bundle: ..., traitCollection: ...)`
    static func icon_button_medium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_medium, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_paste_blue", bundle: ..., traitCollection: ...)`
    static func icon_button_paste_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_paste_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_paste_gray", bundle: ..., traitCollection: ...)`
    static func icon_button_paste_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_paste_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_paste_light_gray", bundle: ..., traitCollection: ...)`
    static func icon_button_paste_light_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_paste_light_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_paste_white", bundle: ..., traitCollection: ...)`
    static func icon_button_paste_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_paste_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_reddit", bundle: ..., traitCollection: ...)`
    static func icon_button_reddit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_reddit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_telegram", bundle: ..., traitCollection: ...)`
    static func icon_button_telegram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_telegram, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_twitter", bundle: ..., traitCollection: ...)`
    static func icon_button_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_twitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_wechat", bundle: ..., traitCollection: ...)`
    static func icon_button_wechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_wechat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_button_youtube", bundle: ..., traitCollection: ...)`
    static func icon_button_youtube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_button_youtube, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cell_select", bundle: ..., traitCollection: ...)`
    static func icon_cell_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cell_unselect", bundle: ..., traitCollection: ...)`
    static func icon_cell_unselect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cell_unselect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_contacts", bundle: ..., traitCollection: ...)`
    static func icon_contacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_contacts, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_logo", bundle: ..., traitCollection: ...)`
    static func icon_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_mnemonic", bundle: ..., traitCollection: ...)`
    static func icon_mnemonic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_mnemonic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_back_black", bundle: ..., traitCollection: ...)`
    static func icon_nav_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_back_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_close_black", bundle: ..., traitCollection: ...)`
    static func icon_nav_close_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_close_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_photo_black", bundle: ..., traitCollection: ...)`
    static func icon_nav_photo_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_photo_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_qrcode_black", bundle: ..., traitCollection: ...)`
    static func icon_nav_qrcode_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_qrcode_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_scan_black", bundle: ..., traitCollection: ...)`
    static func icon_nav_scan_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_scan_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_nav_share_black", bundle: ..., traitCollection: ...)`
    static func icon_nav_share_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_share_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_quota", bundle: ..., traitCollection: ...)`
    static func icon_quota(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_quota, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_receive_logo", bundle: ..., traitCollection: ...)`
    static func icon_receive_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_receive_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_right_white", bundle: ..., traitCollection: ...)`
    static func icon_right_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_right_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_search", bundle: ..., traitCollection: ...)`
    static func icon_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_setting", bundle: ..., traitCollection: ...)`
    static func icon_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_me", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_me(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_me, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_me_select", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_me_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_me_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_vote", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_vote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_vote, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_vote_select", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_vote_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_vote_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_wallet", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_wallet_select", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_wallet_select(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_wallet_select, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_token_vite", bundle: ..., traitCollection: ...)`
    static func icon_token_vite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_token_vite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_token_vite_white", bundle: ..., traitCollection: ...)`
    static func icon_token_vite_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_token_vite_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_coin", bundle: ..., traitCollection: ...)`
    static func icon_tx_coin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_coin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_pledge", bundle: ..., traitCollection: ...)`
    static func icon_tx_pledge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_pledge, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_register", bundle: ..., traitCollection: ...)`
    static func icon_tx_register(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_register, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_reward", bundle: ..., traitCollection: ...)`
    static func icon_tx_reward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_reward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_transfer", bundle: ..., traitCollection: ...)`
    static func icon_tx_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tx_vote", bundle: ..., traitCollection: ...)`
    static func icon_tx_vote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tx_vote, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_vite_logo", bundle: ..., traitCollection: ...)`
    static func icon_vite_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vite_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_vote_rank", bundle: ..., traitCollection: ...)`
    static func icon_vote_rank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_vote_rank, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_voteaddress", bundle: ..., traitCollection: ...)`
    static func icon_voteaddress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_voteaddress, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_votecount", bundle: ..., traitCollection: ...)`
    static func icon_votecount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_votecount, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "intro_icon_0", bundle: ..., traitCollection: ...)`
    static func intro_icon_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intro_icon_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "intro_icon_1", bundle: ..., traitCollection: ...)`
    static func intro_icon_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intro_icon_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "intro_icon_2", bundle: ..., traitCollection: ...)`
    static func intro_icon_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intro_icon_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "intro_icon_3", bundle: ..., traitCollection: ...)`
    static func intro_icon_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.intro_icon_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock_page_user", bundle: ..., traitCollection: ...)`
    static func lock_page_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_page_user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_bg", bundle: ..., traitCollection: ...)`
    static func login_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_logo", bundle: ..., traitCollection: ...)`
    static func login_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "network_error", bundle: ..., traitCollection: ...)`
    static func network_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.network_error, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "quota_bell", bundle: ..., traitCollection: ...)`
    static func quota_bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.quota_bell, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "splash_slogen", bundle: ..., traitCollection: ...)`
    static func splash_slogen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash_slogen, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "success", bundle: ..., traitCollection: ...)`
    static func success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switch_mode_icon", bundle: ..., traitCollection: ...)`
    static func switch_mode_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switch_mode_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabber_shadow", bundle: ..., traitCollection: ...)`
    static func tabber_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabber_shadow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vite", bundle: ..., traitCollection: ...)`
    static func vite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vote_info_bg", bundle: ..., traitCollection: ...)`
    static func vote_info_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vote_info_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vote_info_dot", bundle: ..., traitCollection: ...)`
    static func vote_info_dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vote_info_dot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "vote_info_icon", bundle: ..., traitCollection: ...)`
    static func vote_info_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vote_info_icon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 253 localization keys.
    struct localizable {
      /// en translation:      The advice comes from the using environment as below: 1.System device: %@ 2.System version:%@ 3.APP version：%@ 4.Language:%@
      /// 
      /// Locales: en, zh-Hans
      static let aboutUsPageEmailContent = Rswift.StringResource(key: "aboutUs.page.email.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: %@ unconfirmed
      /// 
      /// Locales: en, zh-Hans
      static let balanceInfoDetailUnconfirmedCountTitle = Rswift.StringResource(key: "balance.info.detail.unconfirmed.count.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 6 digits numeric password
      /// 
      /// Locales: en, zh-Hans
      static let exportPageAlterTfPlaceholder = Rswift.StringResource(key: "export.page.alter.tf.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">About Voting</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">You can join and vote for 25 SBPs(Snapshot Block Producer), each round of voting lasts 75s, your votes equals the balance of your vote address. Your vote keeps the same the next rounds unless you revoke your vote or vote for another node. Random 23 out of top 25 candidates plus 2 out of candidates ranking 26th to 100th, 25 nodes in total will be elected as SBPs.</p>
      /// 
      /// Locales: en, zh-Hans
      static let popPageTipVote = Rswift.StringResource(key: "pop.page.tip.vote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">What is Quota?</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">In the Vite system, users do not purchase the gas required for a transaction by paying a fee, but acquire the computing resource through a quota-based model. Required quota for sending a transaction = the basic quota (request) + quota (the attached text data), quota required to accept a transaction = the basic quota (response). This quota-based resource configuration protocol allows users to obtain higher resource quotas in two ways: </p><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">a.Staking VITE to obtain quota</p><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">b.Running PoW</p><h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">What is Staking?</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">In the Vite system, the user can stake VITE to obtain a certain amount of quota. The minimum value for staking is 1000 VITE, and there is no maximum limit; meanwhile, Vite system also supports that the A-address stakes a part of the VITE and allocates the obtained quota to the B address. When users apply to stake, VITE will be sent to the smart contract address instead of another user, and only the user who applies for staking has access to manage the staking amount.</p><h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">What is PoW?</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">Proof of Work (PoW), is a protocol to confirm that you have done a certain amount of work, and is also an economic measure to deter DDoS attacks and other service abuse. It requires the initiator to conduct a certain amount of computing, which means that it may take some time for the computer. In the Vite system, users can obtain a free quota by running the PoW, and also can send a transaction without any annotated information through obtained quota.</p>
      /// 
      /// Locales: en, zh-Hans
      static let popPageTipQuota = Rswift.StringResource(key: "pop.page.tip.quota", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: <p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">%@ you had voted for has stopped campaigning for SBP, you may vote again or revoke your vote. If you do not do so, your original vote will be recovered after %@ re-registering.</p>
      /// 
      /// Locales: en, zh-Hans
      static let popPageTipVoteLoser = Rswift.StringResource(key: "pop.page.tip.vote.loser", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account Name
      /// 
      /// Locales: en, zh-Hans
      static let createPageTfTitle = Rswift.StringResource(key: "create.page.tf.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account Name
      /// 
      /// Locales: en, zh-Hans
      static let manageWalletPageNameCellTitle = Rswift.StringResource(key: "manage.wallet.page.name.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Account name only supports Chinese and English characters as well as underscores.
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageErrorTypeNameValid = Rswift.StringResource(key: "mnemonic.backup.page.error.type.nameValid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Acquire Quota
      /// 
      /// Locales: en, zh-Hans
      static let quotaManagePageTitle = Rswift.StringResource(key: "quota.manage.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Active
      /// 
      /// Locales: en, zh-Hans
      static let votePageNodeStatusValidTitle = Rswift.StringResource(key: "vote.page.nodeStatus.valid.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Add Address
      /// 
      /// Locales: en, zh-Hans
      static let addressManageAddressGenerateButtonTitle = Rswift.StringResource(key: "address.manage.address.generate.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Add up to maximum 10 addresses!
      /// 
      /// Locales: en, zh-Hans
      static let addressManageAddressGenerateButtonToast = Rswift.StringResource(key: "address.manage.address.generate.button.toast", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Adding...
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicAffirmPageAddLoading = Rswift.StringResource(key: "mnemonic.affirm.page.add.loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Address
      /// 
      /// Locales: en, zh-Hans
      static let voteListAddress = Rswift.StringResource(key: "vote.list.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Address Management
      /// 
      /// Locales: en, zh-Hans
      static let addressManagePageTitle = Rswift.StringResource(key: "address.manage.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Address Management
      /// 
      /// Locales: en, zh-Hans
      static let manageWalletPageAddressManageCellTitle = Rswift.StringResource(key: "manage.wallet.page.addressManage.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Addresses
      /// 
      /// Locales: en, zh-Hans
      static let addressManageAddressHeaderTitle = Rswift.StringResource(key: "address.manage.address.header.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, zh-Hans
      static let sendPageAmountTitle = Rswift.StringResource(key: "send.page.amount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: An ID conflict occurs, please re-submit later
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorRpcErrorCodeIdConflict = Rswift.StringResource(key: "vite.error.rpc.error.code.id.conflict", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Approx %@ days
      /// 
      /// Locales: en, zh-Hans
      static let quotaManagePageQuotaSnapshootHeightDesc = Rswift.StringResource(key: "quota.manage.page.quota.snapshoot.height.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Arouse verify again
      /// 
      /// Locales: en, zh-Hans
      static let lockPageFingerprintBtnTitle = Rswift.StringResource(key: "lock.page.fingerprint.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: At most 10 accounts. The first address and addresses that have transaction records will be shown when resotring account, and addresses with no record will be hidden, these can be regenerated and reused.
      /// 
      /// Locales: en, zh-Hans
      static let addressManageTipAlertMessage = Rswift.StringResource(key: "address.manage.tip.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Back
      /// 
      /// Locales: en, zh-Hans
      static let sendPageConfirmBiometryAuthFailedBack = Rswift.StringResource(key: "send.page.confirm.biometryAuthFailed.back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Back up Wallet Account
      /// 
      /// Locales: en, zh-Hans
      static let createPageTipTitle = Rswift.StringResource(key: "create.page.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Balance
      /// 
      /// Locales: en, zh-Hans
      static let balanceInfoDetailBalanceTitle = Rswift.StringResource(key: "balance.info.detail.balance.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Balance
      /// 
      /// Locales: en, zh-Hans
      static let sendPageMyBalanceTitle = Rswift.StringResource(key: "send.page.my.balance.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Balance
      /// 
      /// Locales: en, zh-Hans
      static let walletHomeBalanceTitle = Rswift.StringResource(key: "wallet.home.balance.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Built-in contract error, please try again later(-35004)
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorRpcErrorCodeContractDataIllegal = Rswift.StringResource(key: "vite.error.rpc.error.code.contract.data.illegal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Built-in contract method not exist, please try again later(-35006)
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorRpcErrorCodeContractMethodNotExist = Rswift.StringResource(key: "vite.error.rpc.error.code.contract.method.not.exist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let importPageAlertExistCancel = Rswift.StringResource(key: "import.page.alert.exist.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let quotaSubmitPopCancelBtnTitle = Rswift.StringResource(key: "quota.submit.pop.cancel.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let sendPageNotEnoughBalanceAlertButton = Rswift.StringResource(key: "send.page.not.enough.balance.alert.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let submitCancel = Rswift.StringResource(key: "Submit.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Candidate Nodes
      /// 
      /// Locales: en, zh-Hans
      static let voteListTitle = Rswift.StringResource(key: "vote.list.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cannot be identified
      /// 
      /// Locales: en, zh-Hans
      static let sendPageConfirmBiometryAuthFailedTitle = Rswift.StringResource(key: "send.page.confirm.biometryAuthFailed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Close
      /// 
      /// Locales: en, zh-Hans
      static let close = Rswift.StringResource(key: "Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Comment
      /// 
      /// Locales: en, zh-Hans
      static let receivePageTokenNoteLabel = Rswift.StringResource(key: "Receive.page.token.note.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Comment
      /// 
      /// Locales: en, zh-Hans
      static let sendPageRemarkTitle = Rswift.StringResource(key: "send.page.remark.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static let confirm = Rswift.StringResource(key: "Confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static let confirmTransactionPageConfirmButton = Rswift.StringResource(key: "confirm.transaction.page.confirm.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static let importPageAlertExistOk = Rswift.StringResource(key: "import.page.alert.exist.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static let quotaSubmitPopSubmitBtnTitle = Rswift.StringResource(key: "quota.submit.pop.submit.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static let voteListConfirmButtonTitle = Rswift.StringResource(key: "vote.list.confirm.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static let voteListConfirmRevote = Rswift.StringResource(key: "vote.list.confirm.revote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm your seed phrase
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicAffirmPageTitle = Rswift.StringResource(key: "mnemonic.affirm.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Contact Us
      /// 
      /// Locales: en, zh-Hans
      static let aboutUsPageCellContact = Rswift.StringResource(key: "aboutUs.page.cell.contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Contract Address
      /// 
      /// Locales: en, zh-Hans
      static let contractConfirmInfo = Rswift.StringResource(key: "contract.confirm.info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create
      /// 
      /// Locales: en, zh-Hans
      static let createPageSubmitBtnTitle = Rswift.StringResource(key: "create.page.submit.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create Account
      /// 
      /// Locales: en, zh-Hans
      static let createAccount = Rswift.StringResource(key: "create.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Create Account
      /// 
      /// Locales: en, zh-Hans
      static let createPageTitle = Rswift.StringResource(key: "create.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Current Height
      /// 
      /// Locales: en, zh-Hans
      static let aboutUsPageCellBlockHeight = Rswift.StringResource(key: "aboutUs.page.cell.blockHeight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Currently Vite App only supports checking staking list, please go to Web Wallet to withdraw staked tokens on due date if needed.
      /// 
      /// Locales: en, zh-Hans
      static let peldgeMessage = Rswift.StringResource(key: "peldge.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Default Receiving Address
      /// 
      /// Locales: en, zh-Hans
      static let addressManageDefaultAddressCellTitle = Rswift.StringResource(key: "address.manage.default.address.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Delete
      /// 
      /// Locales: en, zh-Hans
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Designed in asynchronous architecture, so smooth to make transactions.
      /// 
      /// Locales: en, zh-Hans
      static let introductionPageTip2Desc = Rswift.StringResource(key: "introduction.page.tip2.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Done
      /// 
      /// Locales: en, zh-Hans
      static let finish = Rswift.StringResource(key: "Finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Due Date
      /// 
      /// Locales: en, zh-Hans
      static let peldgeDeadline = Rswift.StringResource(key: "peldge.deadline", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Edit Wallet Name
      /// 
      /// Locales: en, zh-Hans
      static let manageWalletPageAlterChangeName = Rswift.StringResource(key: "manage.wallet.page.alter.changeName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Editing
      /// 
      /// Locales: en, zh-Hans
      static let manageWalletPageChangeNameLoading = Rswift.StringResource(key: "manage.wallet.page.changeName.loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Empty
      /// 
      /// Locales: en, zh-Hans
      static let transactionListPageEmpty = Rswift.StringResource(key: "transaction.list.page.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enter Password
      /// 
      /// Locales: en, zh-Hans
      static let confirmTransactionPageUsePasswordTitle = Rswift.StringResource(key: "confirm.transaction.page.use.password.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Export Seed Phrase
      /// 
      /// Locales: en, zh-Hans
      static let exportPageTitle = Rswift.StringResource(key: "export.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Export Seed Phrase
      /// 
      /// Locales: en, zh-Hans
      static let manageWalletPageImportMnemonicCellTitle = Rswift.StringResource(key: "manage.wallet.page.importMnemonic.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Extremely Fast Transactions
      /// 
      /// Locales: en, zh-Hans
      static let introductionPageTip2Title = Rswift.StringResource(key: "introduction.page.tip2.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Feedback
      /// 
      /// Locales: en, zh-Hans
      static let aboutUsPageEmailTitle = Rswift.StringResource(key: "aboutUs.page.email.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Feeless Transactions
      /// 
      /// Locales: en, zh-Hans
      static let introductionPageTip1Title = Rswift.StringResource(key: "introduction.page.tip1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Generate Seed Phrase
      /// 
      /// Locales: en, zh-Hans
      static let createPageTipNextBtn = Rswift.StringResource(key: "create.page.tip.nextBtn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Generate Seed Phrase
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageTitle = Rswift.StringResource(key: "mnemonic.backup.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Get TPS quota
      /// 
      /// Locales: en, zh-Hans
      static let transactionListTransactionTypeNamePledge = Rswift.StringResource(key: "transaction.list.transaction.type.name.pledge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: HD Wallet Structure
      /// 
      /// Locales: en, zh-Hans
      static let introductionPageTip3Title = Rswift.StringResource(key: "introduction.page.tip3.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I know
      /// 
      /// Locales: en, zh-Hans
      static let addressManageTipAlertOk = Rswift.StringResource(key: "address.manage.tip.alert.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I want a different seed phrase
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageTipAnewBtnTitle = Rswift.StringResource(key: "mnemonic.backup.page.tip.anewBtn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Import Account
      /// 
      /// Locales: en, zh-Hans
      static let importAccount = Rswift.StringResource(key: "import.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Import success
      /// 
      /// Locales: en, zh-Hans
      static let importPageSubmitSuccess = Rswift.StringResource(key: "import.page.submit.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Import...
      /// 
      /// Locales: en, zh-Hans
      static let importPageSubmitLoading = Rswift.StringResource(key: "import.page.submit.loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Inactive
      /// 
      /// Locales: en, zh-Hans
      static let votePageNodeStatusInvalidTitle = Rswift.StringResource(key: "vote.page.nodeStatus.invalid.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Incorrect seed phrase!
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicAffirmAlterCheckTitle = Rswift.StringResource(key: "mnemonic.affirm.alter.check.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Input Amount
      /// 
      /// Locales: en, zh-Hans
      static let receivePageTokenAmountAlertTitle = Rswift.StringResource(key: "Receive.page.token.amount.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Input Amount
      /// 
      /// Locales: en, zh-Hans
      static let receivePageTokenAmountButtonTitle = Rswift.StringResource(key: "Receive.page.token.amount.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Insufficient Balance
      /// 
      /// Locales: en, zh-Hans
      static let sendPageNotEnoughBalanceAlertTitle = Rswift.StringResource(key: "send.page.not.enough.balance.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Insufficient Balance
      /// 
      /// Locales: en, zh-Hans
      static let sendPageToastAmountError = Rswift.StringResource(key: "send.page.toast.amount.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Insufficient Quota
      /// 
      /// Locales: en, zh-Hans
      static let quotaAlertTitle = Rswift.StringResource(key: "quota.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Insufficient balance
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorRpcErrorCodeNotEnoughBalance = Rswift.StringResource(key: "vite.error.rpc.error.code.not.enough.balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Insufficient quota
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorRpcErrorCodeNotEnoughQuota = Rswift.StringResource(key: "vite.error.rpc.error.code.not.enough.quota", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Insufficient quota of PoW, we would recommend that you stake VITE to obtain quota.
      /// 
      /// Locales: en, zh-Hans
      static let quotaAlertNeedQuotaMessage = Rswift.StringResource(key: "quota.alert.need.quota.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Invalid Voting
      /// 
      /// Locales: en, zh-Hans
      static let votePageVoteStatusVoteInvalid = Rswift.StringResource(key: "vote.page.voteStatus.voteInvalid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Language
      /// 
      /// Locales: en, zh-Hans
      static let systemPageCellChangeLanguage = Rswift.StringResource(key: "system.page.cell.change.language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Loading
      /// 
      /// Locales: en, zh-Hans
      static let aboutUsPageCellBlockHeightLoadingTip = Rswift.StringResource(key: "aboutUs.page.cell.blockHeight.loading.tip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Loading
      /// 
      /// Locales: en, zh-Hans
      static let loading = Rswift.StringResource(key: "Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Loading...
      /// 
      /// Locales: en, zh-Hans
      static let transactionListPageHeaderRefreshRefreshing = Rswift.StringResource(key: "transaction.list.page.header.refresh.refreshing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Loading...
      /// 
      /// Locales: en, zh-Hans
      static let viteRefreshBackFooterRefreshingText = Rswift.StringResource(key: "Vite.RefreshBackFooter.RefreshingText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, zh-Hans
      static let loginPageBtnLogin = Rswift.StringResource(key: "login.page.btn.login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login Error
      /// 
      /// Locales: en, zh-Hans
      static let toastErrorLogin = Rswift.StringResource(key: "toast.error.login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login via password
      /// 
      /// Locales: en, zh-Hans
      static let lockPagePwdBtnTitle = Rswift.StringResource(key: "lock.page.pwd.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Logout
      /// 
      /// Locales: en, zh-Hans
      static let systemPageLogoutLoading = Rswift.StringResource(key: "system.page.logout.loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Logout/switch wallet
      /// 
      /// Locales: en, zh-Hans
      static let systemPageCellLogoutTitle = Rswift.StringResource(key: "system.page.cell.logout.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Make sure to stake %@ to obtain quota, you cannot withdraw until about 3 days after staking comes into effect.
      /// 
      /// Locales: en, zh-Hans
      static let quotaSubmitPopDesc = Rswift.StringResource(key: "quota.submit.pop.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Maximum Amount of Tx
      /// 
      /// Locales: en, zh-Hans
      static let sendPageMyMaxTxCountTitle = Rswift.StringResource(key: "send.page.my.max.tx.count.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Me
      /// 
      /// Locales: en, zh-Hans
      static let tabbarItemTitleMy = Rswift.StringResource(key: "tabbar.item.title.my", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Mine
      /// 
      /// Locales: en, zh-Hans
      static let sendPageAddCurrentAddressButtonTitle = Rswift.StringResource(key: "send.page.add.current.address.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Mnemonic seed phrase is the only way to restore your wallet when you switch devices or reinstall this app. You are strongly advised to write down the phrase and keep it in a safe place where only you have access.
      /// 
      /// Locales: en, zh-Hans
      static let createPageTipContent = Rswift.StringResource(key: "create.page.tip.content", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Mnemonic seed phrase is the only way to restore your wallet, please keep it safe or you won't have access to your account for good.
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageTipTitle = Rswift.StringResource(key: "mnemonic.backup.page.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My Address
      /// 
      /// Locales: en, zh-Hans
      static let sendPageMyAddressTitle = Rswift.StringResource(key: "send.page.my.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My QRCode
      /// 
      /// Locales: en, zh-Hans
      static let receivePageMineTitle = Rswift.StringResource(key: "Receive.page.mine.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My Quota
      /// 
      /// Locales: en, zh-Hans
      static let sendPageMyQuotaTitle = Rswift.StringResource(key: "send.page.my.quota.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My Staking List
      /// 
      /// Locales: en, zh-Hans
      static let peldgeTitle = Rswift.StringResource(key: "peldge.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My Votes
      /// 
      /// Locales: en, zh-Hans
      static let votePageVoteInfoNodePollsTitle = Rswift.StringResource(key: "vote.page.voteInfo.nodePolls.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My Voting
      /// 
      /// Locales: en, zh-Hans
      static let votePageTitle = Rswift.StringResource(key: "vote.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: NOTICE
      /// 
      /// Locales: en, zh-Hans
      static let walletHomeScanUrlAlertTitle = Rswift.StringResource(key: "wallet.home.scan.url.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en, zh-Hans
      static let sendPageAmountToolbarButtonTitle = Rswift.StringResource(key: "send.page.amount.toolbar.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageAlterCancel = Rswift.StringResource(key: "mnemonic.backup.page.alter.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No
      /// 
      /// Locales: en, zh-Hans
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No QR code found
      /// 
      /// Locales: en, zh-Hans
      static let scanPageQccodeNotFound = Rswift.StringResource(key: "Scan.page.qccode.not.found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No Vote
      /// 
      /// Locales: en, zh-Hans
      static let votePageInfoNodataTitle = Rswift.StringResource(key: "vote.page.info.nodata.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No more data
      /// 
      /// Locales: en, zh-Hans
      static let viteRefreshBackFooterNoMoreDataText = Rswift.StringResource(key: "Vite.RefreshBackFooter.NoMoreDataText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No result, please try another input
      /// 
      /// Locales: en, zh-Hans
      static let voteListSearchEmpty = Rswift.StringResource(key: "vote.list.search.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Node Name
      /// 
      /// Locales: en, zh-Hans
      static let confirmTransactionPageNodeName = Rswift.StringResource(key: "confirm.transaction.page.node.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Operation failed
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorOperationFailure = Rswift.StringResource(key: "vite.error.operation.failure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Orderly select seed phrase
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicAffirmPageTipTitle = Rswift.StringResource(key: "mnemonic.affirm.page.tip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Payment
      /// 
      /// Locales: en, zh-Hans
      static let confirmTransactionPageTitle = Rswift.StringResource(key: "confirm.transaction.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please Input Password
      /// 
      /// Locales: en, zh-Hans
      static let exportPageAlterTitle = Rswift.StringResource(key: "export.page.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please enter the same password!
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageErrorTypeDifference = Rswift.StringResource(key: "mnemonic.backup.page.error.type.difference", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please input 6 digits password
      /// 
      /// Locales: en, zh-Hans
      static let createPagePwTitle = Rswift.StringResource(key: "create.page.pw.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please input account name or password
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageErrorTypeName = Rswift.StringResource(key: "mnemonic.backup.page.error.type.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please input amount, minimum 1000 VITE
      /// 
      /// Locales: en, zh-Hans
      static let quotaManagePageQuotaMoneyPlaceholder = Rswift.StringResource(key: "quota.manage.page.quota.money.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please input balance
      /// 
      /// Locales: en, zh-Hans
      static let sendPageToastAmountEmpty = Rswift.StringResource(key: "send.page.toast.amount.empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please input beneficiary address
      /// 
      /// Locales: en, zh-Hans
      static let quotaSubmitPageQuotaAddressPlaceholder = Rswift.StringResource(key: "quota.submit.page.quota.address.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please input your password again
      /// 
      /// Locales: en, zh-Hans
      static let createPagePwRepeateTitle = Rswift.StringResource(key: "create.page.pw.repeate.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please input your seed phrase
      /// 
      /// Locales: en, zh-Hans
      static let importPageTitle = Rswift.StringResource(key: "import.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Processing
      /// 
      /// Locales: en, zh-Hans
      static let loginPageLoadingTitle = Rswift.StringResource(key: "login.page.loading.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Prompt
      /// 
      /// Locales: en, zh-Hans
      static let hint = Rswift.StringResource(key: "Hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pull down to refresh
      /// 
      /// Locales: en, zh-Hans
      static let transactionListPageHeaderRefreshIdle = Rswift.StringResource(key: "transaction.list.page.header.refresh.idle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pull up to load more
      /// 
      /// Locales: en, zh-Hans
      static let viteRefreshBackFooterIdleText = Rswift.StringResource(key: "vite.RefreshBackFooter.IdleText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: QRCode cannot be identified
      /// 
      /// Locales: en, zh-Hans
      static let scanPageQccodeNotIdentifiable = Rswift.StringResource(key: "Scan.page.qccode.not.identifiable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Quota Beneficiary
      /// 
      /// Locales: en, zh-Hans
      static let quotaManagePageInputAddressTitle = Rswift.StringResource(key: "quota.manage.page.input.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Receive
      /// 
      /// Locales: en, zh-Hans
      static let balanceInfoDetailReveiceButtonTitle = Rswift.StringResource(key: "balance.info.detail.reveice.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Receive
      /// 
      /// Locales: en, zh-Hans
      static let receivePageTokenTitle = Rswift.StringResource(key: "Receive.page.token.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Recipient
      /// 
      /// Locales: en, zh-Hans
      static let confirmTransactionAddressTitle = Rswift.StringResource(key: "confirm.transaction.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Recipient
      /// 
      /// Locales: en, zh-Hans
      static let sendPageToAddressTitle = Rswift.StringResource(key: "send.page.to.address.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Refresh
      /// 
      /// Locales: en, zh-Hans
      static let transactionListPageNetworkError = Rswift.StringResource(key: "transaction.list.page.network.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Registration
      /// 
      /// Locales: en, zh-Hans
      static let transactionListTransactionTypeNameRegister = Rswift.StringResource(key: "transaction.list.transaction.type.name.register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Release to load more.
      /// 
      /// Locales: en, zh-Hans
      static let viteRefreshBackFooterPullingText = Rswift.StringResource(key: "Vite.RefreshBackFooter.PullingText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Release to refresh
      /// 
      /// Locales: en, zh-Hans
      static let transactionListPageHeaderRefreshPulling = Rswift.StringResource(key: "transaction.list.page.header.refresh.pulling", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Restore Account
      /// 
      /// Locales: en, zh-Hans
      static let importPageSubmitBtn = Rswift.StringResource(key: "import.page.submit.btn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Retrieve Rewards
      /// 
      /// Locales: en, zh-Hans
      static let transactionListTransactionTypeNameExtractReward = Rswift.StringResource(key: "transaction.list.transaction.type.name.extractReward", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Retry
      /// 
      /// Locales: en, zh-Hans
      static let sendPageConfirmPasswordAuthFailedRetry = Rswift.StringResource(key: "send.page.confirm.passwordAuthFailed.retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Revoke Registration
      /// 
      /// Locales: en, zh-Hans
      static let transactionListTransactionTypeNameCancelRegister = Rswift.StringResource(key: "transaction.list.transaction.type.name.cancelRegister", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Revoke Vote
      /// 
      /// Locales: en, zh-Hans
      static let confirmTransactionPageCancelVote = Rswift.StringResource(key: "confirm.transaction.page.cancel.vote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Revoke Voting
      /// 
      /// Locales: en, zh-Hans
      static let transactionListTransactionTypeNameCancelVote = Rswift.StringResource(key: "transaction.list.transaction.type.name.cancelVote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Revoke Voting
      /// 
      /// Locales: en, zh-Hans
      static let votePageVoteInfoCancelVoteTitle = Rswift.StringResource(key: "vote.page.voteInfo.cancel.vote.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Revoking
      /// 
      /// Locales: en, zh-Hans
      static let votePageVoteStatusCancelVoting = Rswift.StringResource(key: "vote.page.voteStatus.cancelVoting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Run PoW
      /// 
      /// Locales: en, zh-Hans
      static let quotaAlertPowButtonTitle = Rswift.StringResource(key: "quota.alert.pow.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Run PoW
      /// 
      /// Locales: en, zh-Hans
      static let quotaFloatViewTitle = Rswift.StringResource(key: "quota.float.view.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Scan
      /// 
      /// Locales: en, zh-Hans
      static let scanPageTitle = Rswift.StringResource(key: "Scan.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Scan
      /// 
      /// Locales: en, zh-Hans
      static let sendPageScanAddressButtonTitle = Rswift.StringResource(key: "send.page.scan.address.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Scan and transfer %@
      /// 
      /// Locales: en, zh-Hans
      static let receivePageTokenNameLabel = Rswift.StringResource(key: "Receive.page.token.name.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search for name or address of candidate nodes
      /// 
      /// Locales: en, zh-Hans
      static let voteListSearch = Rswift.StringResource(key: "vote.list.search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Seed Phrase
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageTipLabTitle = Rswift.StringResource(key: "mnemonic.backup.page.tip.lab.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Select Accounts
      /// 
      /// Locales: en, zh-Hans
      static let loginPageBtnChooseName = Rswift.StringResource(key: "login.page.btn.chooseName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Select wallet account
      /// 
      /// Locales: en, zh-Hans
      static let selectWalletAccount = Rswift.StringResource(key: "select.wallet.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, zh-Hans
      static let sendPageSendButtonTitle = Rswift.StringResource(key: "send.page.send.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Share Vite APP
      /// 
      /// Locales: en, zh-Hans
      static let aboutUsPageCellShareUs = Rswift.StringResource(key: "aboutUs.page.cell.shareUs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Short in quota, you can acquire quota by running PoW or staking VITE.
      /// 
      /// Locales: en, zh-Hans
      static let quotaAlertPowAndQuotaMessage = Rswift.StringResource(key: "quota.alert.pow.and.quota.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Snapshot block height is illegal, please try again later
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorRpcErrorCodeRefrenceSnapshootBlockIllegal = Rswift.StringResource(key: "vite.error.rpc.error.code.refrence.snapshoot.block.illegal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Something went wrong with network, please try again later
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorNetworkError = Rswift.StringResource(key: "vite.error.network.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Something wrong with your seed phrase, please try again!
      /// 
      /// Locales: en, zh-Hans
      static let importPageSubmitInvalidMnemonic = Rswift.StringResource(key: "import.page.submit.invalid.mnemonic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Stake VITE
      /// 
      /// Locales: en, zh-Hans
      static let quotaAlertQuotaButtonTitle = Rswift.StringResource(key: "quota.alert.quota.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Staking Amount
      /// 
      /// Locales: en, zh-Hans
      static let quotaManagePageQuotaMoneyTitle = Rswift.StringResource(key: "quota.manage.page.quota.money.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Staking List
      /// 
      /// Locales: en, zh-Hans
      static let quotaManagePageCheckQuotaListBtnTitle = Rswift.StringResource(key: "quota.manage.page.check.quotaList.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Staking amount should not be less than 1000
      /// 
      /// Locales: en, zh-Hans
      static let quotaManagePageToastMoneyError = Rswift.StringResource(key: "quota.manage.page.toast.money.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Staking freeze duration
      /// 
      /// Locales: en, zh-Hans
      static let quotaManagePageQuotaSnapshootHeightTitle = Rswift.StringResource(key: "quota.manage.page.quota.snapshoot.height.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Start VITE Journey
      /// 
      /// Locales: en, zh-Hans
      static let introductionPageNextBtnTitle = Rswift.StringResource(key: "introduction.page.nextBtn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Submit
      /// 
      /// Locales: en, zh-Hans
      static let submit = Rswift.StringResource(key: "Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Submit Staking
      /// 
      /// Locales: en, zh-Hans
      static let quotaManagePageSubmitBtnTitle = Rswift.StringResource(key: "quota.manage.page.submit.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Submit Successful
      /// 
      /// Locales: en, zh-Hans
      static let submitSuccess = Rswift.StringResource(key: "Submit.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Success
      /// 
      /// Locales: en, zh-Hans
      static let sendPageToastSendSuccess = Rswift.StringResource(key: "send.page.toast.send.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Successful Vote
      /// 
      /// Locales: en, zh-Hans
      static let votePageVoteStatusVoteSuccess = Rswift.StringResource(key: "vote.page.voteStatus.voteSuccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Successfully copied!
      /// 
      /// Locales: en, zh-Hans
      static let walletHomeToastCopyAddress = Rswift.StringResource(key: "wallet.home.toast.copy.address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Successfully send vote request
      /// 
      /// Locales: en, zh-Hans
      static let voteListSendSuccess = Rswift.StringResource(key: "vote.list.send.success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Support multiple tokens, easy to manage accounts.
      /// 
      /// Locales: en, zh-Hans
      static let introductionPageTip3Desc = Rswift.StringResource(key: "introduction.page.tip3.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Switch account
      /// 
      /// Locales: en, zh-Hans
      static let lockPageChangeUserBtnTitle = Rswift.StringResource(key: "lock.page.changeUser.btn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Switch to %@ mnemonic words
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageSwitchModeTitle = Rswift.StringResource(key: "mnemonic.backup.page.switch.mode.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: System verify failed, please try again later (-35002)
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorRpcErrorCodeHashVerifyFailure = Rswift.StringResource(key: "vite.error.rpc.error.code.hash.verify.failure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: System verify failed, please try again later (-35003)
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorRpcErrorCodeSignatureVerifyFailure = Rswift.StringResource(key: "vite.error.rpc.error.code.signature.verify.failure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: System verify failed, please try again later (-35004)
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorRpcErrorCodePowNonceVerifyFailure = Rswift.StringResource(key: "vite.error.rpc.error.code.pow.nonce.verify.failure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The amount has to be positive
      /// 
      /// Locales: en, zh-Hans
      static let sendPageToastAmountZero = Rswift.StringResource(key: "send.page.toast.amount.zero", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The length of notes has reached limitations
      /// 
      /// Locales: en, zh-Hans
      static let sendPageToastNoteTooLong = Rswift.StringResource(key: "send.page.toast.note.too.long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The seed phrase you input has already had an account name '%@' on current device, are you sure you would like to overwrite existed account
      /// 
      /// Locales: en, zh-Hans
      static let importPageAlertExistTitle = Rswift.StringResource(key: "import.page.alert.exist.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: This action will regenerate seed phrase, ready to go back?
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicAffirmAlterTitle = Rswift.StringResource(key: "mnemonic.affirm.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Token Info Error
      /// 
      /// Locales: en, zh-Hans
      static let sendPageTokenInfoError = Rswift.StringResource(key: "send.page.token.info.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Token Issuance
      /// 
      /// Locales: en, zh-Hans
      static let transactionListTransactionTypeNameCoin = Rswift.StringResource(key: "transaction.list.transaction.type.name.coin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transaction History
      /// 
      /// Locales: en, zh-Hans
      static let transactionListPageTitle = Rswift.StringResource(key: "transaction.list.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transactions are sent too frequent, please try again later
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorRpcErrorCodeRefrenceSameSnapshootBlock = Rswift.StringResource(key: "vite.error.rpc.error.code.refrence.same.snapshoot.block", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transfer
      /// 
      /// Locales: en, zh-Hans
      static let balanceInfoDetailSendButtonTitle = Rswift.StringResource(key: "balance.info.detail.send.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transfer
      /// 
      /// Locales: en, zh-Hans
      static let sendPageTitle = Rswift.StringResource(key: "send.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transfer
      /// 
      /// Locales: en, zh-Hans
      static let transactionListTransactionTypeNameTransfer = Rswift.StringResource(key: "transaction.list.transaction.type.name.transfer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unable to revoke vote, you have to run PoW or stake VITE for TPS quota to revoke vote
      /// 
      /// Locales: en, zh-Hans
      static let votePageVoteInfoAlertQuota = Rswift.StringResource(key: "vote.page.voteInfo.alert.quota", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unable to vote, you have to run PoW or stake VITE for TPS quota to vote
      /// 
      /// Locales: en, zh-Hans
      static let voteListAlertQuota = Rswift.StringResource(key: "vote.list.alert.quota", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unlock By Face ID
      /// 
      /// Locales: en, zh-Hans
      static let systemPageCellLoginFaceId = Rswift.StringResource(key: "system.page.cell.login.faceId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unlock By Password
      /// 
      /// Locales: en, zh-Hans
      static let systemPageCellLoginPwd = Rswift.StringResource(key: "system.page.cell.login.pwd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unlock By Touch ID
      /// 
      /// Locales: en, zh-Hans
      static let systemPageCellLoginTouchId = Rswift.StringResource(key: "system.page.cell.login.touchId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unreceived
      /// 
      /// Locales: en, zh-Hans
      static let balanceInfoDetailUnconfirmedTitle = Rswift.StringResource(key: "balance.info.detail.unconfirmed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unreceived %@
      /// 
      /// Locales: en, zh-Hans
      static let walletHomeUnconfirmedTitle = Rswift.StringResource(key: "wallet.home.unconfirmed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Update App
      /// 
      /// Locales: en, zh-Hans
      static let updateApp = Rswift.StringResource(key: "Update.app", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Update Registration
      /// 
      /// Locales: en, zh-Hans
      static let transactionListTransactionTypeNameRegisterUpdate = Rswift.StringResource(key: "transaction.list.transaction.type.name.registerUpdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Use Face ID For Transaction
      /// 
      /// Locales: en, zh-Hans
      static let systemPageCellTransferFaceId = Rswift.StringResource(key: "system.page.cell.transfer.faceId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Use TPS quota for payment, get free TPS quota by running PoW.
      /// 
      /// Locales: en, zh-Hans
      static let introductionPageTip1Desc = Rswift.StringResource(key: "introduction.page.tip1.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Use Touch ID For Transaction
      /// 
      /// Locales: en, zh-Hans
      static let systemPageCellTransferTouchId = Rswift.StringResource(key: "system.page.cell.transfer.touchId", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Use password
      /// 
      /// Locales: en, zh-Hans
      static let confirmTransactionPageUsePassword = Rswift.StringResource(key: "confirm.transaction.page.use.password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Username only supports less than 32 characters
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageErrorTypeValidWalletNameCount = Rswift.StringResource(key: "mnemonic.backup.page.error.type.validWalletNameCount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Verify
      /// 
      /// Locales: en, zh-Hans
      static let confirmTransactionPageBiometryConfirmReason = Rswift.StringResource(key: "confirm.transaction.page.biometry.confirm.reason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Verify fingerprint to activate Touch ID
      /// 
      /// Locales: en, zh-Hans
      static let lockPageFingerprintAlterTitle = Rswift.StringResource(key: "lock.page.fingerprint.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hans
      static let aboutUsPageCellVersion = Rswift.StringResource(key: "aboutUs.page.cell.version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: View Transaction History
      /// 
      /// Locales: en, zh-Hans
      static let balanceInfoDetailShowTransactionsButtonTitle = Rswift.StringResource(key: "balance.info.detail.show.transactions.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Vite Wallet
      /// 
      /// Locales: en, zh-Hans
      static let receivePageWalletName = Rswift.StringResource(key: "Receive.page.wallet.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Vite.blog
      /// 
      /// Locales: en, zh-Hans
      static let aboutUsPageCellBlogWebsite = Rswift.StringResource(key: "aboutUs.page.cell.blog.website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Vite.net
      /// 
      /// Locales: en, zh-Hans
      static let aboutUsPageCellPortalWebsite = Rswift.StringResource(key: "aboutUs.page.cell.portal.website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Vite.org
      /// 
      /// Locales: en, zh-Hans
      static let aboutUsPageCellOfficialWebsite = Rswift.StringResource(key: "aboutUs.page.cell.official.website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Vote
      /// 
      /// Locales: en, zh-Hans
      static let confirmTransactionPageVote = Rswift.StringResource(key: "confirm.transaction.page.vote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Vote
      /// 
      /// Locales: en, zh-Hans
      static let vote = Rswift.StringResource(key: "Vote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Vote for official SBPs, acquire rewards of VITE.
      /// 
      /// Locales: en, zh-Hans
      static let introductionPageTip4Desc = Rswift.StringResource(key: "introduction.page.tip4.desc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Vote revoking request is successfully sent
      /// 
      /// Locales: en, zh-Hans
      static let votePageVoteInfoCancelVoteToastTitle = Rswift.StringResource(key: "vote.page.voteInfo.cancel.vote.toast.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Vote to collect rewards
      /// 
      /// Locales: en, zh-Hans
      static let introductionPageTip4Title = Rswift.StringResource(key: "introduction.page.tip4.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Votes
      /// 
      /// Locales: en, zh-Hans
      static let voteListCount = Rswift.StringResource(key: "vote.list.count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Voting
      /// 
      /// Locales: en, zh-Hans
      static let transactionListTransactionTypeNameVote = Rswift.StringResource(key: "transaction.list.transaction.type.name.vote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Voting
      /// 
      /// Locales: en, zh-Hans
      static let votePageVoteStatusVoting = Rswift.StringResource(key: "vote.page.voteStatus.voting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static let tabbarItemTitleWallet = Rswift.StringResource(key: "tabbar.item.title.wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet Management
      /// 
      /// Locales: en, zh-Hans
      static let manageWalletPageTitle = Rswift.StringResource(key: "manage.wallet.page.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet name can not be empty
      /// 
      /// Locales: en, zh-Hans
      static let manageWalletPageErrorTypeName = Rswift.StringResource(key: "manage.wallet.page.error.type.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: We strongly advise against taking a screenshot of the seed phrase.  We suggest that you write down the seed phrase on a piece of paper and keep it in a safe place.
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageAlterTitle = Rswift.StringResource(key: "mnemonic.backup.page.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdrawal of staking quota
      /// 
      /// Locales: en, zh-Hans
      static let transactionListTransactionTypeNameCancelPledge = Rswift.StringResource(key: "transaction.list.transaction.type.name.cancelPledge", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Withdrawal of staking tokens
      /// 
      /// Locales: en, zh-Hans
      static let transactionListTransactionTypeNameCancelCoin = Rswift.StringResource(key: "transaction.list.transaction.type.name.cancelCoin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Would you like to create a new seed phrase?
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageAlterMessage = Rswift.StringResource(key: "mnemonic.backup.page.alter.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wrong Password!
      /// 
      /// Locales: en, zh-Hans
      static let exportPageAlterPasswordError = Rswift.StringResource(key: "export.page.alter.password.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wrong address, please check the format
      /// 
      /// Locales: en, zh-Hans
      static let sendPageToastAddressError = Rswift.StringResource(key: "send.page.toast.address.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wrong format with transaction amount
      /// 
      /// Locales: en, zh-Hans
      static let viteUriAmountFormatError = Rswift.StringResource(key: "vite.uri.amount.format.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wrong password!
      /// 
      /// Locales: en, zh-Hans
      static let confirmTransactionPageToastPasswordError = Rswift.StringResource(key: "confirm.transaction.page.toast.password.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wrong password! Please try to import seed phrase instead
      /// 
      /// Locales: en, zh-Hans
      static let loginPageErrorToastTitle = Rswift.StringResource(key: "login.page.error.toast.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Yes
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageAlterConfirm = Rswift.StringResource(key: "mnemonic.backup.page.alter.confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Yes
      /// 
      /// Locales: en, zh-Hans
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Yes, I have written down my seed phrase
      /// 
      /// Locales: en, zh-Hans
      static let mnemonicBackupPageTipNextBtnTitle = Rswift.StringResource(key: "mnemonic.backup.page.tip.nextBtn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You are going to visit a third party page which leaves Vite App. Your use on this page will abide by third party Term of User Agreement and Privacy Policy, Vite Labs has any supervision or control over the quality, content, reliability or security of the third party dApp, nor shall Vite Labs be liable for its use.
      /// 
      /// Locales: en, zh-Hans
      static let walletHomeScanUrlAlertMessage = Rswift.StringResource(key: "wallet.home.scan.url.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You cannot make any transfer until you receive a transaction.
      /// 
      /// Locales: en, zh-Hans
      static let viteErrorRpcErrorCodeNoTransactionBefore = Rswift.StringResource(key: "vite.error.rpc.error.code.no.transaction.before", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You cannot vote for now as there is no transaction record in your address
      /// 
      /// Locales: en, zh-Hans
      static let voteListSearchNoTransactionBefore = Rswift.StringResource(key: "vote.list.search.no.transaction.before", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You have voted for %@, please make sure this action will overwrite current voting result
      /// 
      /// Locales: en, zh-Hans
      static let voteListAlertAlreadyVoted = Rswift.StringResource(key: "vote.list.alert.already.voted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 使用设置
      /// 
      /// Locales: en, zh-Hans
      static let myPageSystemCellTitle = Rswift.StringResource(key: "my.page.system.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 修改账户名
      /// 
      /// Locales: en, zh-Hans
      static let myPageChangeWalletNameAlterTitle = Rswift.StringResource(key: "my.page.change.wallet.name.alter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 关于我们
      /// 
      /// Locales: en, zh-Hans
      static let myPageAboutUsCellTitle = Rswift.StringResource(key: "my.page.aboutUs.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 助记词
      /// 
      /// Locales: en, zh-Hans
      static let myPageMnemonicCellTitle = Rswift.StringResource(key: "my.page.mnemonic.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 我的地址
      /// 
      /// Locales: en, zh-Hans
      static let addressManageDefaultAddressName = Rswift.StringResource(key: "address.manage.default.address.name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 联系人
      /// 
      /// Locales: en, zh-Hans
      static let myPageContactsCellTitle = Rswift.StringResource(key: "my.page.contacts.cell.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      
      /// en translation:      The advice comes from the using environment as below: 1.System device: %@ 2.System version:%@ 3.APP version：%@ 4.Language:%@
      /// 
      /// Locales: en, zh-Hans
      static func aboutUsPageEmailContent(_ value1: String, _ value2: String, _ value3: String, _ value4: String) -> String {
        return String(format: NSLocalizedString("aboutUs.page.email.content", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3, value4)
      }
      
      /// en translation: %@ unconfirmed
      /// 
      /// Locales: en, zh-Hans
      static func balanceInfoDetailUnconfirmedCountTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("balance.info.detail.unconfirmed.count.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: 6 digits numeric password
      /// 
      /// Locales: en, zh-Hans
      static func exportPageAlterTfPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("export.page.alter.tf.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">About Voting</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">You can join and vote for 25 SBPs(Snapshot Block Producer), each round of voting lasts 75s, your votes equals the balance of your vote address. Your vote keeps the same the next rounds unless you revoke your vote or vote for another node. Random 23 out of top 25 candidates plus 2 out of candidates ranking 26th to 100th, 25 nodes in total will be elected as SBPs.</p>
      /// 
      /// Locales: en, zh-Hans
      static func popPageTipVote(_: Void = ()) -> String {
        return NSLocalizedString("pop.page.tip.vote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: <h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">What is Quota?</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">In the Vite system, users do not purchase the gas required for a transaction by paying a fee, but acquire the computing resource through a quota-based model. Required quota for sending a transaction = the basic quota (request) + quota (the attached text data), quota required to accept a transaction = the basic quota (response). This quota-based resource configuration protocol allows users to obtain higher resource quotas in two ways: </p><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">a.Staking VITE to obtain quota</p><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">b.Running PoW</p><h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">What is Staking?</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">In the Vite system, the user can stake VITE to obtain a certain amount of quota. The minimum value for staking is 1000 VITE, and there is no maximum limit; meanwhile, Vite system also supports that the A-address stakes a part of the VITE and allocates the obtained quota to the B address. When users apply to stake, VITE will be sent to the smart contract address instead of another user, and only the user who applies for staking has access to manage the staking amount.</p><h1 style="font-PingFangSC-Medium;font-size:12;color:#24272B">What is PoW?</h1><p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">Proof of Work (PoW), is a protocol to confirm that you have done a certain amount of work, and is also an economic measure to deter DDoS attacks and other service abuse. It requires the initiator to conduct a certain amount of computing, which means that it may take some time for the computer. In the Vite system, users can obtain a free quota by running the PoW, and also can send a transaction without any annotated information through obtained quota.</p>
      /// 
      /// Locales: en, zh-Hans
      static func popPageTipQuota(_: Void = ()) -> String {
        return NSLocalizedString("pop.page.tip.quota", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: <p style="font-PingFangSC-Regular;font-size:11;color:#3E4A59">%@ you had voted for has stopped campaigning for SBP, you may vote again or revoke your vote. If you do not do so, your original vote will be recovered after %@ re-registering.</p>
      /// 
      /// Locales: en, zh-Hans
      static func popPageTipVoteLoser(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("pop.page.tip.vote.loser", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Account Name
      /// 
      /// Locales: en, zh-Hans
      static func createPageTfTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tf.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account Name
      /// 
      /// Locales: en, zh-Hans
      static func manageWalletPageNameCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.name.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Account name only supports Chinese and English characters as well as underscores.
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageErrorTypeNameValid(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.error.type.nameValid", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Acquire Quota
      /// 
      /// Locales: en, zh-Hans
      static func quotaManagePageTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Active
      /// 
      /// Locales: en, zh-Hans
      static func votePageNodeStatusValidTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.nodeStatus.valid.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add Address
      /// 
      /// Locales: en, zh-Hans
      static func addressManageAddressGenerateButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.address.generate.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add up to maximum 10 addresses!
      /// 
      /// Locales: en, zh-Hans
      static func addressManageAddressGenerateButtonToast(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.address.generate.button.toast", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Adding...
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicAffirmPageAddLoading(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.page.add.loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address
      /// 
      /// Locales: en, zh-Hans
      static func voteListAddress(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address Management
      /// 
      /// Locales: en, zh-Hans
      static func addressManagePageTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address Management
      /// 
      /// Locales: en, zh-Hans
      static func manageWalletPageAddressManageCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.addressManage.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Addresses
      /// 
      /// Locales: en, zh-Hans
      static func addressManageAddressHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.address.header.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, zh-Hans
      static func sendPageAmountTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.amount.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: An ID conflict occurs, please re-submit later
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorRpcErrorCodeIdConflict(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.id.conflict", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Approx %@ days
      /// 
      /// Locales: en, zh-Hans
      static func quotaManagePageQuotaSnapshootHeightDesc(_ value1: String) -> String {
        return String(format: NSLocalizedString("quota.manage.page.quota.snapshoot.height.desc", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Arouse verify again
      /// 
      /// Locales: en, zh-Hans
      static func lockPageFingerprintBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("lock.page.fingerprint.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: At most 10 accounts. The first address and addresses that have transaction records will be shown when resotring account, and addresses with no record will be hidden, these can be regenerated and reused.
      /// 
      /// Locales: en, zh-Hans
      static func addressManageTipAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.tip.alert.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back
      /// 
      /// Locales: en, zh-Hans
      static func sendPageConfirmBiometryAuthFailedBack(_: Void = ()) -> String {
        return NSLocalizedString("send.page.confirm.biometryAuthFailed.back", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back up Wallet Account
      /// 
      /// Locales: en, zh-Hans
      static func createPageTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance
      /// 
      /// Locales: en, zh-Hans
      static func balanceInfoDetailBalanceTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.balance.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance
      /// 
      /// Locales: en, zh-Hans
      static func sendPageMyBalanceTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.my.balance.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Balance
      /// 
      /// Locales: en, zh-Hans
      static func walletHomeBalanceTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallet.home.balance.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Built-in contract error, please try again later(-35004)
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorRpcErrorCodeContractDataIllegal(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.contract.data.illegal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Built-in contract method not exist, please try again later(-35006)
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorRpcErrorCodeContractMethodNotExist(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.contract.method.not.exist", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func importPageAlertExistCancel(_: Void = ()) -> String {
        return NSLocalizedString("import.page.alert.exist.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func quotaSubmitPopCancelBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.submit.pop.cancel.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func sendPageNotEnoughBalanceAlertButton(_: Void = ()) -> String {
        return NSLocalizedString("send.page.not.enough.balance.alert.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func submitCancel(_: Void = ()) -> String {
        return NSLocalizedString("Submit.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Candidate Nodes
      /// 
      /// Locales: en, zh-Hans
      static func voteListTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cannot be identified
      /// 
      /// Locales: en, zh-Hans
      static func sendPageConfirmBiometryAuthFailedTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.confirm.biometryAuthFailed.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Close
      /// 
      /// Locales: en, zh-Hans
      static func close(_: Void = ()) -> String {
        return NSLocalizedString("Close", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Comment
      /// 
      /// Locales: en, zh-Hans
      static func receivePageTokenNoteLabel(_: Void = ()) -> String {
        return NSLocalizedString("Receive.page.token.note.label", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Comment
      /// 
      /// Locales: en, zh-Hans
      static func sendPageRemarkTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.remark.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static func confirm(_: Void = ()) -> String {
        return NSLocalizedString("Confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static func confirmTransactionPageConfirmButton(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.confirm.button", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static func importPageAlertExistOk(_: Void = ()) -> String {
        return NSLocalizedString("import.page.alert.exist.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static func quotaSubmitPopSubmitBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.submit.pop.submit.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static func voteListConfirmButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.confirm.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static func voteListConfirmRevote(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.confirm.revote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm your seed phrase
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicAffirmPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contact Us
      /// 
      /// Locales: en, zh-Hans
      static func aboutUsPageCellContact(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.contact", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contract Address
      /// 
      /// Locales: en, zh-Hans
      static func contractConfirmInfo(_: Void = ()) -> String {
        return NSLocalizedString("contract.confirm.info", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create
      /// 
      /// Locales: en, zh-Hans
      static func createPageSubmitBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.submit.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Account
      /// 
      /// Locales: en, zh-Hans
      static func createAccount(_: Void = ()) -> String {
        return NSLocalizedString("create.account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create Account
      /// 
      /// Locales: en, zh-Hans
      static func createPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Height
      /// 
      /// Locales: en, zh-Hans
      static func aboutUsPageCellBlockHeight(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.blockHeight", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currently Vite App only supports checking staking list, please go to Web Wallet to withdraw staked tokens on due date if needed.
      /// 
      /// Locales: en, zh-Hans
      static func peldgeMessage(_: Void = ()) -> String {
        return NSLocalizedString("peldge.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Default Receiving Address
      /// 
      /// Locales: en, zh-Hans
      static func addressManageDefaultAddressCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.default.address.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete
      /// 
      /// Locales: en, zh-Hans
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("Delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Designed in asynchronous architecture, so smooth to make transactions.
      /// 
      /// Locales: en, zh-Hans
      static func introductionPageTip2Desc(_: Void = ()) -> String {
        return NSLocalizedString("introduction.page.tip2.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Done
      /// 
      /// Locales: en, zh-Hans
      static func finish(_: Void = ()) -> String {
        return NSLocalizedString("Finish", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Due Date
      /// 
      /// Locales: en, zh-Hans
      static func peldgeDeadline(_: Void = ()) -> String {
        return NSLocalizedString("peldge.deadline", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit Wallet Name
      /// 
      /// Locales: en, zh-Hans
      static func manageWalletPageAlterChangeName(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.alter.changeName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Editing
      /// 
      /// Locales: en, zh-Hans
      static func manageWalletPageChangeNameLoading(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.changeName.loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Empty
      /// 
      /// Locales: en, zh-Hans
      static func transactionListPageEmpty(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter Password
      /// 
      /// Locales: en, zh-Hans
      static func confirmTransactionPageUsePasswordTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.use.password.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Export Seed Phrase
      /// 
      /// Locales: en, zh-Hans
      static func exportPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Export Seed Phrase
      /// 
      /// Locales: en, zh-Hans
      static func manageWalletPageImportMnemonicCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.importMnemonic.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Extremely Fast Transactions
      /// 
      /// Locales: en, zh-Hans
      static func introductionPageTip2Title(_: Void = ()) -> String {
        return NSLocalizedString("introduction.page.tip2.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Feedback
      /// 
      /// Locales: en, zh-Hans
      static func aboutUsPageEmailTitle(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.email.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Feeless Transactions
      /// 
      /// Locales: en, zh-Hans
      static func introductionPageTip1Title(_: Void = ()) -> String {
        return NSLocalizedString("introduction.page.tip1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Generate Seed Phrase
      /// 
      /// Locales: en, zh-Hans
      static func createPageTipNextBtn(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tip.nextBtn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Generate Seed Phrase
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get TPS quota
      /// 
      /// Locales: en, zh-Hans
      static func transactionListTransactionTypeNamePledge(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.pledge", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: HD Wallet Structure
      /// 
      /// Locales: en, zh-Hans
      static func introductionPageTip3Title(_: Void = ()) -> String {
        return NSLocalizedString("introduction.page.tip3.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I know
      /// 
      /// Locales: en, zh-Hans
      static func addressManageTipAlertOk(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.tip.alert.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I want a different seed phrase
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageTipAnewBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip.anewBtn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import Account
      /// 
      /// Locales: en, zh-Hans
      static func importAccount(_: Void = ()) -> String {
        return NSLocalizedString("import.account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import success
      /// 
      /// Locales: en, zh-Hans
      static func importPageSubmitSuccess(_: Void = ()) -> String {
        return NSLocalizedString("import.page.submit.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import...
      /// 
      /// Locales: en, zh-Hans
      static func importPageSubmitLoading(_: Void = ()) -> String {
        return NSLocalizedString("import.page.submit.loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Inactive
      /// 
      /// Locales: en, zh-Hans
      static func votePageNodeStatusInvalidTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.nodeStatus.invalid.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Incorrect seed phrase!
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicAffirmAlterCheckTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.alter.check.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Input Amount
      /// 
      /// Locales: en, zh-Hans
      static func receivePageTokenAmountAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("Receive.page.token.amount.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Input Amount
      /// 
      /// Locales: en, zh-Hans
      static func receivePageTokenAmountButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("Receive.page.token.amount.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient Balance
      /// 
      /// Locales: en, zh-Hans
      static func sendPageNotEnoughBalanceAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.not.enough.balance.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient Balance
      /// 
      /// Locales: en, zh-Hans
      static func sendPageToastAmountError(_: Void = ()) -> String {
        return NSLocalizedString("send.page.toast.amount.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient Quota
      /// 
      /// Locales: en, zh-Hans
      static func quotaAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient balance
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorRpcErrorCodeNotEnoughBalance(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.not.enough.balance", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient quota
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorRpcErrorCodeNotEnoughQuota(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.not.enough.quota", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient quota of PoW, we would recommend that you stake VITE to obtain quota.
      /// 
      /// Locales: en, zh-Hans
      static func quotaAlertNeedQuotaMessage(_: Void = ()) -> String {
        return NSLocalizedString("quota.alert.need.quota.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid Voting
      /// 
      /// Locales: en, zh-Hans
      static func votePageVoteStatusVoteInvalid(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteStatus.voteInvalid", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Language
      /// 
      /// Locales: en, zh-Hans
      static func systemPageCellChangeLanguage(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.change.language", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading
      /// 
      /// Locales: en, zh-Hans
      static func aboutUsPageCellBlockHeightLoadingTip(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.blockHeight.loading.tip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading
      /// 
      /// Locales: en, zh-Hans
      static func loading(_: Void = ()) -> String {
        return NSLocalizedString("Loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading...
      /// 
      /// Locales: en, zh-Hans
      static func transactionListPageHeaderRefreshRefreshing(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.header.refresh.refreshing", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading...
      /// 
      /// Locales: en, zh-Hans
      static func viteRefreshBackFooterRefreshingText(_: Void = ()) -> String {
        return NSLocalizedString("Vite.RefreshBackFooter.RefreshingText", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, zh-Hans
      static func loginPageBtnLogin(_: Void = ()) -> String {
        return NSLocalizedString("login.page.btn.login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login Error
      /// 
      /// Locales: en, zh-Hans
      static func toastErrorLogin(_: Void = ()) -> String {
        return NSLocalizedString("toast.error.login", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login via password
      /// 
      /// Locales: en, zh-Hans
      static func lockPagePwdBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("lock.page.pwd.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Logout
      /// 
      /// Locales: en, zh-Hans
      static func systemPageLogoutLoading(_: Void = ()) -> String {
        return NSLocalizedString("system.page.logout.loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Logout/switch wallet
      /// 
      /// Locales: en, zh-Hans
      static func systemPageCellLogoutTitle(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.logout.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Make sure to stake %@ to obtain quota, you cannot withdraw until about 3 days after staking comes into effect.
      /// 
      /// Locales: en, zh-Hans
      static func quotaSubmitPopDesc(_ value1: String) -> String {
        return String(format: NSLocalizedString("quota.submit.pop.desc", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Maximum Amount of Tx
      /// 
      /// Locales: en, zh-Hans
      static func sendPageMyMaxTxCountTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.my.max.tx.count.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Me
      /// 
      /// Locales: en, zh-Hans
      static func tabbarItemTitleMy(_: Void = ()) -> String {
        return NSLocalizedString("tabbar.item.title.my", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mine
      /// 
      /// Locales: en, zh-Hans
      static func sendPageAddCurrentAddressButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.add.current.address.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mnemonic seed phrase is the only way to restore your wallet when you switch devices or reinstall this app. You are strongly advised to write down the phrase and keep it in a safe place where only you have access.
      /// 
      /// Locales: en, zh-Hans
      static func createPageTipContent(_: Void = ()) -> String {
        return NSLocalizedString("create.page.tip.content", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Mnemonic seed phrase is the only way to restore your wallet, please keep it safe or you won't have access to your account for good.
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Address
      /// 
      /// Locales: en, zh-Hans
      static func sendPageMyAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.my.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My QRCode
      /// 
      /// Locales: en, zh-Hans
      static func receivePageMineTitle(_: Void = ()) -> String {
        return NSLocalizedString("Receive.page.mine.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Quota
      /// 
      /// Locales: en, zh-Hans
      static func sendPageMyQuotaTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.my.quota.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Staking List
      /// 
      /// Locales: en, zh-Hans
      static func peldgeTitle(_: Void = ()) -> String {
        return NSLocalizedString("peldge.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Votes
      /// 
      /// Locales: en, zh-Hans
      static func votePageVoteInfoNodePollsTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteInfo.nodePolls.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Voting
      /// 
      /// Locales: en, zh-Hans
      static func votePageTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NOTICE
      /// 
      /// Locales: en, zh-Hans
      static func walletHomeScanUrlAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallet.home.scan.url.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en, zh-Hans
      static func sendPageAmountToolbarButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.amount.toolbar.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageAlterCancel(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.alter.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No
      /// 
      /// Locales: en, zh-Hans
      static func no(_: Void = ()) -> String {
        return NSLocalizedString("No", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No QR code found
      /// 
      /// Locales: en, zh-Hans
      static func scanPageQccodeNotFound(_: Void = ()) -> String {
        return NSLocalizedString("Scan.page.qccode.not.found", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No Vote
      /// 
      /// Locales: en, zh-Hans
      static func votePageInfoNodataTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.info.nodata.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No more data
      /// 
      /// Locales: en, zh-Hans
      static func viteRefreshBackFooterNoMoreDataText(_: Void = ()) -> String {
        return NSLocalizedString("Vite.RefreshBackFooter.NoMoreDataText", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No result, please try another input
      /// 
      /// Locales: en, zh-Hans
      static func voteListSearchEmpty(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.search.empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Node Name
      /// 
      /// Locales: en, zh-Hans
      static func confirmTransactionPageNodeName(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.node.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Operation failed
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorOperationFailure(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.operation.failure", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Orderly select seed phrase
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicAffirmPageTipTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.page.tip.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Payment
      /// 
      /// Locales: en, zh-Hans
      static func confirmTransactionPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please Input Password
      /// 
      /// Locales: en, zh-Hans
      static func exportPageAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.page.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter the same password!
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageErrorTypeDifference(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.error.type.difference", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input 6 digits password
      /// 
      /// Locales: en, zh-Hans
      static func createPagePwTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.pw.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input account name or password
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageErrorTypeName(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.error.type.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input amount, minimum 1000 VITE
      /// 
      /// Locales: en, zh-Hans
      static func quotaManagePageQuotaMoneyPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.quota.money.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input balance
      /// 
      /// Locales: en, zh-Hans
      static func sendPageToastAmountEmpty(_: Void = ()) -> String {
        return NSLocalizedString("send.page.toast.amount.empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input beneficiary address
      /// 
      /// Locales: en, zh-Hans
      static func quotaSubmitPageQuotaAddressPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("quota.submit.page.quota.address.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input your password again
      /// 
      /// Locales: en, zh-Hans
      static func createPagePwRepeateTitle(_: Void = ()) -> String {
        return NSLocalizedString("create.page.pw.repeate.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input your seed phrase
      /// 
      /// Locales: en, zh-Hans
      static func importPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("import.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Processing
      /// 
      /// Locales: en, zh-Hans
      static func loginPageLoadingTitle(_: Void = ()) -> String {
        return NSLocalizedString("login.page.loading.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Prompt
      /// 
      /// Locales: en, zh-Hans
      static func hint(_: Void = ()) -> String {
        return NSLocalizedString("Hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pull down to refresh
      /// 
      /// Locales: en, zh-Hans
      static func transactionListPageHeaderRefreshIdle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.header.refresh.idle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pull up to load more
      /// 
      /// Locales: en, zh-Hans
      static func viteRefreshBackFooterIdleText(_: Void = ()) -> String {
        return NSLocalizedString("vite.RefreshBackFooter.IdleText", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: QRCode cannot be identified
      /// 
      /// Locales: en, zh-Hans
      static func scanPageQccodeNotIdentifiable(_: Void = ()) -> String {
        return NSLocalizedString("Scan.page.qccode.not.identifiable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Quota Beneficiary
      /// 
      /// Locales: en, zh-Hans
      static func quotaManagePageInputAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.input.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive
      /// 
      /// Locales: en, zh-Hans
      static func balanceInfoDetailReveiceButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.reveice.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive
      /// 
      /// Locales: en, zh-Hans
      static func receivePageTokenTitle(_: Void = ()) -> String {
        return NSLocalizedString("Receive.page.token.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipient
      /// 
      /// Locales: en, zh-Hans
      static func confirmTransactionAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipient
      /// 
      /// Locales: en, zh-Hans
      static func sendPageToAddressTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.to.address.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Refresh
      /// 
      /// Locales: en, zh-Hans
      static func transactionListPageNetworkError(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.network.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Registration
      /// 
      /// Locales: en, zh-Hans
      static func transactionListTransactionTypeNameRegister(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.register", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Release to load more.
      /// 
      /// Locales: en, zh-Hans
      static func viteRefreshBackFooterPullingText(_: Void = ()) -> String {
        return NSLocalizedString("Vite.RefreshBackFooter.PullingText", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Release to refresh
      /// 
      /// Locales: en, zh-Hans
      static func transactionListPageHeaderRefreshPulling(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.header.refresh.pulling", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Restore Account
      /// 
      /// Locales: en, zh-Hans
      static func importPageSubmitBtn(_: Void = ()) -> String {
        return NSLocalizedString("import.page.submit.btn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retrieve Rewards
      /// 
      /// Locales: en, zh-Hans
      static func transactionListTransactionTypeNameExtractReward(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.extractReward", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retry
      /// 
      /// Locales: en, zh-Hans
      static func sendPageConfirmPasswordAuthFailedRetry(_: Void = ()) -> String {
        return NSLocalizedString("send.page.confirm.passwordAuthFailed.retry", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Revoke Registration
      /// 
      /// Locales: en, zh-Hans
      static func transactionListTransactionTypeNameCancelRegister(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.cancelRegister", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Revoke Vote
      /// 
      /// Locales: en, zh-Hans
      static func confirmTransactionPageCancelVote(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.cancel.vote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Revoke Voting
      /// 
      /// Locales: en, zh-Hans
      static func transactionListTransactionTypeNameCancelVote(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.cancelVote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Revoke Voting
      /// 
      /// Locales: en, zh-Hans
      static func votePageVoteInfoCancelVoteTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteInfo.cancel.vote.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Revoking
      /// 
      /// Locales: en, zh-Hans
      static func votePageVoteStatusCancelVoting(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteStatus.cancelVoting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Run PoW
      /// 
      /// Locales: en, zh-Hans
      static func quotaAlertPowButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.alert.pow.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Run PoW
      /// 
      /// Locales: en, zh-Hans
      static func quotaFloatViewTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.float.view.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan
      /// 
      /// Locales: en, zh-Hans
      static func scanPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("Scan.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan
      /// 
      /// Locales: en, zh-Hans
      static func sendPageScanAddressButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.scan.address.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Scan and transfer %@
      /// 
      /// Locales: en, zh-Hans
      static func receivePageTokenNameLabel(_ value1: String) -> String {
        return String(format: NSLocalizedString("Receive.page.token.name.label", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Search for name or address of candidate nodes
      /// 
      /// Locales: en, zh-Hans
      static func voteListSearch(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.search", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Seed Phrase
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageTipLabTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip.lab.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select Accounts
      /// 
      /// Locales: en, zh-Hans
      static func loginPageBtnChooseName(_: Void = ()) -> String {
        return NSLocalizedString("login.page.btn.chooseName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select wallet account
      /// 
      /// Locales: en, zh-Hans
      static func selectWalletAccount(_: Void = ()) -> String {
        return NSLocalizedString("select.wallet.account", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, zh-Hans
      static func sendPageSendButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.send.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share Vite APP
      /// 
      /// Locales: en, zh-Hans
      static func aboutUsPageCellShareUs(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.shareUs", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Short in quota, you can acquire quota by running PoW or staking VITE.
      /// 
      /// Locales: en, zh-Hans
      static func quotaAlertPowAndQuotaMessage(_: Void = ()) -> String {
        return NSLocalizedString("quota.alert.pow.and.quota.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Snapshot block height is illegal, please try again later
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorRpcErrorCodeRefrenceSnapshootBlockIllegal(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.refrence.snapshoot.block.illegal", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong with network, please try again later
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorNetworkError(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.network.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something wrong with your seed phrase, please try again!
      /// 
      /// Locales: en, zh-Hans
      static func importPageSubmitInvalidMnemonic(_: Void = ()) -> String {
        return NSLocalizedString("import.page.submit.invalid.mnemonic", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Stake VITE
      /// 
      /// Locales: en, zh-Hans
      static func quotaAlertQuotaButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.alert.quota.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staking Amount
      /// 
      /// Locales: en, zh-Hans
      static func quotaManagePageQuotaMoneyTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.quota.money.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staking List
      /// 
      /// Locales: en, zh-Hans
      static func quotaManagePageCheckQuotaListBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.check.quotaList.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staking amount should not be less than 1000
      /// 
      /// Locales: en, zh-Hans
      static func quotaManagePageToastMoneyError(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.toast.money.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Staking freeze duration
      /// 
      /// Locales: en, zh-Hans
      static func quotaManagePageQuotaSnapshootHeightTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.quota.snapshoot.height.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Start VITE Journey
      /// 
      /// Locales: en, zh-Hans
      static func introductionPageNextBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("introduction.page.nextBtn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Submit
      /// 
      /// Locales: en, zh-Hans
      static func submit(_: Void = ()) -> String {
        return NSLocalizedString("Submit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Submit Staking
      /// 
      /// Locales: en, zh-Hans
      static func quotaManagePageSubmitBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("quota.manage.page.submit.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Submit Successful
      /// 
      /// Locales: en, zh-Hans
      static func submitSuccess(_: Void = ()) -> String {
        return NSLocalizedString("Submit.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Success
      /// 
      /// Locales: en, zh-Hans
      static func sendPageToastSendSuccess(_: Void = ()) -> String {
        return NSLocalizedString("send.page.toast.send.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Successful Vote
      /// 
      /// Locales: en, zh-Hans
      static func votePageVoteStatusVoteSuccess(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteStatus.voteSuccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Successfully copied!
      /// 
      /// Locales: en, zh-Hans
      static func walletHomeToastCopyAddress(_: Void = ()) -> String {
        return NSLocalizedString("wallet.home.toast.copy.address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Successfully send vote request
      /// 
      /// Locales: en, zh-Hans
      static func voteListSendSuccess(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.send.success", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Support multiple tokens, easy to manage accounts.
      /// 
      /// Locales: en, zh-Hans
      static func introductionPageTip3Desc(_: Void = ()) -> String {
        return NSLocalizedString("introduction.page.tip3.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Switch account
      /// 
      /// Locales: en, zh-Hans
      static func lockPageChangeUserBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("lock.page.changeUser.btn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Switch to %@ mnemonic words
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageSwitchModeTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("mnemonic.backup.page.switch.mode.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: System verify failed, please try again later (-35002)
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorRpcErrorCodeHashVerifyFailure(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.hash.verify.failure", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: System verify failed, please try again later (-35003)
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorRpcErrorCodeSignatureVerifyFailure(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.signature.verify.failure", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: System verify failed, please try again later (-35004)
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorRpcErrorCodePowNonceVerifyFailure(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.pow.nonce.verify.failure", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The amount has to be positive
      /// 
      /// Locales: en, zh-Hans
      static func sendPageToastAmountZero(_: Void = ()) -> String {
        return NSLocalizedString("send.page.toast.amount.zero", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The length of notes has reached limitations
      /// 
      /// Locales: en, zh-Hans
      static func sendPageToastNoteTooLong(_: Void = ()) -> String {
        return NSLocalizedString("send.page.toast.note.too.long", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The seed phrase you input has already had an account name '%@' on current device, are you sure you would like to overwrite existed account
      /// 
      /// Locales: en, zh-Hans
      static func importPageAlertExistTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("import.page.alert.exist.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: This action will regenerate seed phrase, ready to go back?
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicAffirmAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.affirm.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Info Error
      /// 
      /// Locales: en, zh-Hans
      static func sendPageTokenInfoError(_: Void = ()) -> String {
        return NSLocalizedString("send.page.token.info.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Token Issuance
      /// 
      /// Locales: en, zh-Hans
      static func transactionListTransactionTypeNameCoin(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.coin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction History
      /// 
      /// Locales: en, zh-Hans
      static func transactionListPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transactions are sent too frequent, please try again later
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorRpcErrorCodeRefrenceSameSnapshootBlock(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.refrence.same.snapshoot.block", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer
      /// 
      /// Locales: en, zh-Hans
      static func balanceInfoDetailSendButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.send.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer
      /// 
      /// Locales: en, zh-Hans
      static func sendPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer
      /// 
      /// Locales: en, zh-Hans
      static func transactionListTransactionTypeNameTransfer(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.transfer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unable to revoke vote, you have to run PoW or stake VITE for TPS quota to revoke vote
      /// 
      /// Locales: en, zh-Hans
      static func votePageVoteInfoAlertQuota(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteInfo.alert.quota", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unable to vote, you have to run PoW or stake VITE for TPS quota to vote
      /// 
      /// Locales: en, zh-Hans
      static func voteListAlertQuota(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.alert.quota", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unlock By Face ID
      /// 
      /// Locales: en, zh-Hans
      static func systemPageCellLoginFaceId(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.login.faceId", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unlock By Password
      /// 
      /// Locales: en, zh-Hans
      static func systemPageCellLoginPwd(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.login.pwd", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unlock By Touch ID
      /// 
      /// Locales: en, zh-Hans
      static func systemPageCellLoginTouchId(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.login.touchId", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unreceived
      /// 
      /// Locales: en, zh-Hans
      static func balanceInfoDetailUnconfirmedTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.unconfirmed.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unreceived %@
      /// 
      /// Locales: en, zh-Hans
      static func walletHomeUnconfirmedTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("wallet.home.unconfirmed.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Update App
      /// 
      /// Locales: en, zh-Hans
      static func updateApp(_: Void = ()) -> String {
        return NSLocalizedString("Update.app", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Update Registration
      /// 
      /// Locales: en, zh-Hans
      static func transactionListTransactionTypeNameRegisterUpdate(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.registerUpdate", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Use Face ID For Transaction
      /// 
      /// Locales: en, zh-Hans
      static func systemPageCellTransferFaceId(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.transfer.faceId", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Use TPS quota for payment, get free TPS quota by running PoW.
      /// 
      /// Locales: en, zh-Hans
      static func introductionPageTip1Desc(_: Void = ()) -> String {
        return NSLocalizedString("introduction.page.tip1.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Use Touch ID For Transaction
      /// 
      /// Locales: en, zh-Hans
      static func systemPageCellTransferTouchId(_: Void = ()) -> String {
        return NSLocalizedString("system.page.cell.transfer.touchId", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Use password
      /// 
      /// Locales: en, zh-Hans
      static func confirmTransactionPageUsePassword(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.use.password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Username only supports less than 32 characters
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageErrorTypeValidWalletNameCount(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.error.type.validWalletNameCount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verify
      /// 
      /// Locales: en, zh-Hans
      static func confirmTransactionPageBiometryConfirmReason(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.biometry.confirm.reason", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verify fingerprint to activate Touch ID
      /// 
      /// Locales: en, zh-Hans
      static func lockPageFingerprintAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("lock.page.fingerprint.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hans
      static func aboutUsPageCellVersion(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.version", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View Transaction History
      /// 
      /// Locales: en, zh-Hans
      static func balanceInfoDetailShowTransactionsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("balance.info.detail.show.transactions.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite Wallet
      /// 
      /// Locales: en, zh-Hans
      static func receivePageWalletName(_: Void = ()) -> String {
        return NSLocalizedString("Receive.page.wallet.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite.blog
      /// 
      /// Locales: en, zh-Hans
      static func aboutUsPageCellBlogWebsite(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.blog.website", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite.net
      /// 
      /// Locales: en, zh-Hans
      static func aboutUsPageCellPortalWebsite(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.portal.website", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vite.org
      /// 
      /// Locales: en, zh-Hans
      static func aboutUsPageCellOfficialWebsite(_: Void = ()) -> String {
        return NSLocalizedString("aboutUs.page.cell.official.website", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote
      /// 
      /// Locales: en, zh-Hans
      static func confirmTransactionPageVote(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.vote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote
      /// 
      /// Locales: en, zh-Hans
      static func vote(_: Void = ()) -> String {
        return NSLocalizedString("Vote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote for official SBPs, acquire rewards of VITE.
      /// 
      /// Locales: en, zh-Hans
      static func introductionPageTip4Desc(_: Void = ()) -> String {
        return NSLocalizedString("introduction.page.tip4.desc", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote revoking request is successfully sent
      /// 
      /// Locales: en, zh-Hans
      static func votePageVoteInfoCancelVoteToastTitle(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteInfo.cancel.vote.toast.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Vote to collect rewards
      /// 
      /// Locales: en, zh-Hans
      static func introductionPageTip4Title(_: Void = ()) -> String {
        return NSLocalizedString("introduction.page.tip4.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Votes
      /// 
      /// Locales: en, zh-Hans
      static func voteListCount(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.count", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Voting
      /// 
      /// Locales: en, zh-Hans
      static func transactionListTransactionTypeNameVote(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.vote", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Voting
      /// 
      /// Locales: en, zh-Hans
      static func votePageVoteStatusVoting(_: Void = ()) -> String {
        return NSLocalizedString("vote.page.voteStatus.voting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static func tabbarItemTitleWallet(_: Void = ()) -> String {
        return NSLocalizedString("tabbar.item.title.wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet Management
      /// 
      /// Locales: en, zh-Hans
      static func manageWalletPageTitle(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet name can not be empty
      /// 
      /// Locales: en, zh-Hans
      static func manageWalletPageErrorTypeName(_: Void = ()) -> String {
        return NSLocalizedString("manage.wallet.page.error.type.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: We strongly advise against taking a screenshot of the seed phrase.  We suggest that you write down the seed phrase on a piece of paper and keep it in a safe place.
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdrawal of staking quota
      /// 
      /// Locales: en, zh-Hans
      static func transactionListTransactionTypeNameCancelPledge(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.cancelPledge", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Withdrawal of staking tokens
      /// 
      /// Locales: en, zh-Hans
      static func transactionListTransactionTypeNameCancelCoin(_: Void = ()) -> String {
        return NSLocalizedString("transaction.list.transaction.type.name.cancelCoin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Would you like to create a new seed phrase?
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageAlterMessage(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.alter.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong Password!
      /// 
      /// Locales: en, zh-Hans
      static func exportPageAlterPasswordError(_: Void = ()) -> String {
        return NSLocalizedString("export.page.alter.password.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong address, please check the format
      /// 
      /// Locales: en, zh-Hans
      static func sendPageToastAddressError(_: Void = ()) -> String {
        return NSLocalizedString("send.page.toast.address.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong format with transaction amount
      /// 
      /// Locales: en, zh-Hans
      static func viteUriAmountFormatError(_: Void = ()) -> String {
        return NSLocalizedString("vite.uri.amount.format.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong password!
      /// 
      /// Locales: en, zh-Hans
      static func confirmTransactionPageToastPasswordError(_: Void = ()) -> String {
        return NSLocalizedString("confirm.transaction.page.toast.password.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong password! Please try to import seed phrase instead
      /// 
      /// Locales: en, zh-Hans
      static func loginPageErrorToastTitle(_: Void = ()) -> String {
        return NSLocalizedString("login.page.error.toast.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yes
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageAlterConfirm(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.alter.confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yes
      /// 
      /// Locales: en, zh-Hans
      static func yes(_: Void = ()) -> String {
        return NSLocalizedString("Yes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yes, I have written down my seed phrase
      /// 
      /// Locales: en, zh-Hans
      static func mnemonicBackupPageTipNextBtnTitle(_: Void = ()) -> String {
        return NSLocalizedString("mnemonic.backup.page.tip.nextBtn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You are going to visit a third party page which leaves Vite App. Your use on this page will abide by third party Term of User Agreement and Privacy Policy, Vite Labs has any supervision or control over the quality, content, reliability or security of the third party dApp, nor shall Vite Labs be liable for its use.
      /// 
      /// Locales: en, zh-Hans
      static func walletHomeScanUrlAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("wallet.home.scan.url.alert.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You cannot make any transfer until you receive a transaction.
      /// 
      /// Locales: en, zh-Hans
      static func viteErrorRpcErrorCodeNoTransactionBefore(_: Void = ()) -> String {
        return NSLocalizedString("vite.error.rpc.error.code.no.transaction.before", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You cannot vote for now as there is no transaction record in your address
      /// 
      /// Locales: en, zh-Hans
      static func voteListSearchNoTransactionBefore(_: Void = ()) -> String {
        return NSLocalizedString("vote.list.search.no.transaction.before", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You have voted for %@, please make sure this action will overwrite current voting result
      /// 
      /// Locales: en, zh-Hans
      static func voteListAlertAlreadyVoted(_ value1: String) -> String {
        return String(format: NSLocalizedString("vote.list.alert.already.voted", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: 使用设置
      /// 
      /// Locales: en, zh-Hans
      static func myPageSystemCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.system.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 修改账户名
      /// 
      /// Locales: en, zh-Hans
      static func myPageChangeWalletNameAlterTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.change.wallet.name.alter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 关于我们
      /// 
      /// Locales: en, zh-Hans
      static func myPageAboutUsCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.aboutUs.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 助记词
      /// 
      /// Locales: en, zh-Hans
      static func myPageMnemonicCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.mnemonic.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 我的地址
      /// 
      /// Locales: en, zh-Hans
      static func addressManageDefaultAddressName(_: Void = ()) -> String {
        return NSLocalizedString("address.manage.default.address.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 联系人
      /// 
      /// Locales: en, zh-Hans
      static func myPageContactsCellTitle(_: Void = ()) -> String {
        return NSLocalizedString("my.page.contacts.cell.title", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
